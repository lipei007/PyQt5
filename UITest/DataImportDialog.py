# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DataImportDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime
import random

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import Qt
from PyQt5.QtCore import QThreadPool, QObject, QRunnable, pyqtSignal, pyqtSlot
from PyQt5.QtWidgets import QMessageBox

import TableFields
import utils.Excel
import utils.DataSource
from MyTableWidget import MyTableWidget


class DataImportSignal(QObject):
    data_signal = pyqtSignal(list)


class DataImportWorker(QRunnable):

    def __init__(self, file):
        super(DataImportWorker, self).__init__()
        self.signal = DataImportSignal()
        self.file = file

    @pyqtSlot()
    def run(self) -> None:
        self.load_data(self.file)

    def load_data(self, file):
        data = utils.Excel.read(file)
        data = utils.Excel.convert_excel_data(data)
        self.signal.data_signal.emit(data)

class DataImportDialog(QtWidgets.QDialog):

    def __init__(self):
        super(DataImportDialog, self).__init__()
        self.setupUi()
        self.setup()
        self.exec_()

    def setupUi(self):
        Dialog = self
        Dialog.setObjectName("Dialog")
        Dialog.resize(609, 437)
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setMinimumSize(QtCore.QSize(80, 30))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tableWidget = MyTableWidget(Dialog)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.horizontalLayout_2.addWidget(self.tableWidget)
        self.widget = QtWidgets.QWidget(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setMinimumSize(QtCore.QSize(150, 0))
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_2.sizePolicy().hasHeightForWidth())
        self.lineEdit_2.setSizePolicy(sizePolicy)
        self.lineEdit_2.setMinimumSize(QtCore.QSize(0, 30))
        self.lineEdit_2.setMaximumSize(QtCore.QSize(16777215, 30))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.verticalLayout_2.addWidget(self.lineEdit_2)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_2.addWidget(self.pushButton_2)
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout_2.addItem(spacerItem)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_2.addWidget(self.pushButton_3)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.pushButton_4 = QtWidgets.QPushButton(self.widget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_2.addWidget(self.pushButton_4)
        self.horizontalLayout_2.addWidget(self.widget)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle("导入数据")
        self.pushButton.setText(_translate("Dialog", "打开文件"))
        self.pushButton_2.setText(_translate("Dialog", "格式化日期"))
        self.pushButton_3.setText(_translate("Dialog", "删除选中行"))
        self.pushButton_4.setText(_translate("Dialog", "保存"))

    def setup(self):
        self.thread_pool = QThreadPool(self)
        self.lineEdit_2.setPlaceholderText("MM/dd/yyyy")
        self.pushButton.clicked.connect(self.on_open_xls)
        self.pushButton_3.clicked.connect(self.on_rm_row)
        self.pushButton_4.clicked.connect(self.on_save)
        self.pushButton_2.clicked.connect(self.on_format_date)

    def alert_msg(self, msg):
        QMessageBox.about(self, '温馨提示', msg)

    def fake_work_phone(self, home_phone):
        pre3 = home_phone[:3]
        for q in range(7):
            n = random.randint(0, 9)
            pre3 = pre3 + f'{n}'
        value = pre3
        return value

    def on_save(self):
        col_map = self.tableWidget.current_header_values()
        field_map = TableFields.maps

        r = self.tableWidget.rowCount()
        c = self.tableWidget.columnCount()
        cur_year = int(datetime.datetime.now().strftime("%Y"))

        total_count = r
        ignore_count = 0

        for i in range(0, r):
            keys = []
            values = []
            home_phone = None
            is_ignore = False

            # 月收入
            month_income = random.randint(1200, 2300)
            keys.append("monthly_income")
            values.append(f"{month_income}")

            # 年收入
            year_income = month_income * random.randint(12, 14)
            keys.append("year_income")
            values.append(f"{year_income}")

            for j in range(0, c):
                w = self.tableWidget.item(i, j)
                txt = w.text()
                if txt is None:
                    txt = ''
                f = col_map.get(j, None)
                if f is not None:
                    if f != '无':
                        key = field_map.get(f, None)
                        if key is not None:

                            # 提取SSN后四位
                            if key == "ssn":
                                value_n = len(txt)
                                if value_n >= 4:
                                    ssn_last4 = txt[value_n - 4:value_n]  # 包括开始索引，不包含结束索引
                                    keys.append("ssn_last4")
                                    values.append(ssn_last4)

                            # 提取出生年
                            if key == "birthday":
                                birthday = txt
                                if len(birthday) >= 4:
                                    try:
                                        birth_year = int(birthday[0:4])
                                        lf = cur_year - birth_year
                                        if lf > 60 or lf < 20:  # 年龄太大或太小，忽略
                                            is_ignore = True
                                            break
                                        keys.append("birth_year")
                                        values.append(birth_year)
                                    except:
                                        pass

                            if key == "home_phone":
                                if len(txt) != 10:  # 联系电话无效
                                    is_ignore = True
                                    break
                                home_phone = txt

                            # 处理整型数据
                            if key == "years_resident" or key == "years_employed":
                                try:
                                    txt = int(txt)
                                except:
                                    txt = random.randint(1, 5)

                            keys.append(key)
                            values.append(txt)

            if is_ignore or home_phone is None:  # 没有联系电话，视资料不合格
                ignore_count = ignore_count + 1
                continue

            # 处理工作电话
            work_phone_i = keys.index("work_phone")
            if work_phone_i >= 0:  # 工作电话存在，检查有效性
                work_phone = values[work_phone_i]
                if len(work_phone) != 10:
                    work_phone = self.fake_work_phone(home_phone)
                    values[work_phone_i] = work_phone
                else:
                    if work_phone == home_phone:  # 工作电话和家庭电话一致，无效
                        work_phone = self.fake_work_phone(home_phone)
                        values[work_phone_i] = work_phone
            else:  # 工作电话不存在，构造
                work_phone = self.fake_work_phone(home_phone)
                keys.append("work_phone")
                values.append(work_phone)

            # 构造SQL
            utils.DataSource.insert_key_values_to_table('us_data', keys, values)

        ret = QMessageBox.information(self, '温馨提示',
                                   f"导入数据{total_count}条，成功{total_count-ignore_count}条，失败{ignore_count}条",
                                   QMessageBox.Yes, QMessageBox.Yes)
        if ret == QMessageBox.Yes:
            self.close()

    def on_rm_row(self):
        row = self.tableWidget.currentRow()
        if row is None:
            return
        if row < 0:
            return

        self.tableWidget.removeRow(row)

    def on_format_date(self):
        col = self.tableWidget.currentColumn()
        if col is None:
            return
        if col < 0:
            return
        r = self.tableWidget.rowCount()
        # c = self.tableWidget.columnCount()

        date_format = self.lineEdit_2.text()
        if date_format is None:
            self.alert_msg("日期格式不正确")
            return
        if len(date_format) == 0:
            self.alert_msg("日期格式不正确")
            return

        if not date_format.__contains__("yyyy") or not date_format.__contains__("MM") or not date_format.__contains__("dd"):
            self.alert_msg("日期格式不正确")
            return

        date_format = date_format.replace("yyyy", "%Y")
        date_format = date_format.replace("MM", "%m")
        date_format = date_format.replace("dd", "%d")

        from datetime import datetime

        for i in range(0, r):
            w = self.tableWidget.item(i, col)
            txt = w.text()
            try:
                new_time = datetime.strptime(txt, date_format)
                txt = new_time.strftime('%Y-%m-%d')
                w.setText(txt)
            except:
                continue




    def on_open_xls(self):
        fileName, fileType = QtWidgets.QFileDialog.getOpenFileName(self, "选取文件", "/", "All Files(*)")
        self.lineEdit.setText(fileName)
        if len(fileName) > 0:
            self.read_xls(fileName)

    def on_read_data(self, data):
        rows = len(data)
        cols = 0
        if rows > 0:
            r0 = data[0]
            cols = len(r0)

        fields = TableFields.maps.keys()
        arr = ['无'] + list(fields)
        self.tableWidget.set_header_choices(arr)

        if rows > 0 and cols > 0:
            self.tableWidget.set_data_size(rows, cols)
        for i, r in enumerate(data):
            for j, v in enumerate(r):
                self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem(str(v)))

    def read_xls(self, file):
        worker = DataImportWorker(file)
        worker.signal.data_signal.connect(self.on_read_data)
        self.thread_pool.start(worker)

