# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TaskWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSize
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QListWidgetItem, QVBoxLayout, QHBoxLayout, QLabel, QWidget

from TaskCell import TaskCell
from TaskCreateWindow import TaskCreateDialog


class TaskStartButton(QtWidgets.QPushButton):

    def __init__(self, task):
        super().__init__()
        self.task = task


class TaskEntity:
    def __init__(self, tid, name, create_time, proxy_ip, port, task_url, profile_id, total_success_num, total_do_num, today_success_num, today_do_num, is_running):
        self.name = name
        self.proxy_ip = proxy_ip
        self.port = port
        self.task_url = task_url
        self.profile_id = profile_id
        self.tid = tid
        self.total_success_num = total_success_num
        self.total_do_num = total_do_num
        self.today_success_num = today_success_num
        self.today_do_num = today_do_num
        self.create_time = create_time
        self.is_running = is_running


class TaskCellWrap:
    def __init__(self, widget, name_lb: QtWidgets.QLabel, ctime_lb: QtWidgets.QLabel, total_num_lb: QtWidgets.QLabel, today_num_lb: QtWidgets.QLabel, proxy_ip_lb: QtWidgets.QLabel, proxy_port_lb: QtWidgets.QLabel, profile_id_lb: QtWidgets.QLabel,
                 task_url_lb: QtWidgets.QLabel, start_btn: TaskStartButton):
        self.widget = widget
        self.name_lb = name_lb
        self.ctime_lb = ctime_lb
        self.total_num_lb = total_num_lb
        self.today_num_lb = today_num_lb
        self.proxy_ip_lb = proxy_ip_lb
        self.proxy_port_lb = proxy_port_lb
        self.profile_id_lb = profile_id_lb
        self.task_url_lb = task_url_lb
        self.start_btn = start_btn

        # print("开始绑定点击回调")
        # self.start_btn.clicked.connect(self.on_click_start_task)

    def on_click_start_task(self):
        print("开启任务")

    def on_update_task(self, task: TaskEntity):
        self.name_lb.setText(task.name)
        self.ctime_lb.setText(task.create_time)
        self.total_num_lb.setText(f'{task.total_success_num}/{task.total_do_num}')
        self.today_num_lb.setText(f'{task.today_success_num}/{task.today_do_num}')
        self.proxy_ip_lb.setText(task.proxy_ip)
        self.proxy_port_lb.setText(task.port)
        self.profile_id_lb.setText(task.profile_id)
        self.task_url_lb.setText(task.task_url)

        if task.is_running == 0:
            self.start_btn.setText("开启任务")
        else:
            self.start_btn.setText("结束任务")

def get_task_cell(index):
    wight = QWidget()

    verticalLayout_2 = QtWidgets.QVBoxLayout()

    verticalLayout = QtWidgets.QVBoxLayout()

    horizontalLayout = QtWidgets.QHBoxLayout()

    label = QtWidgets.QLabel("任务名称")
    horizontalLayout.addWidget(label)

    label_2 = QtWidgets.QLabel("创建时间：2021-09-20")
    label_2.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    horizontalLayout.addWidget(label_2)

    verticalLayout.addLayout(horizontalLayout)
    verticalLayout_2.addLayout(verticalLayout)

    horizontalLayout_7 = QtWidgets.QHBoxLayout()

    label_4 = QtWidgets.QLabel("累计成功/累计完成")
    horizontalLayout_7.addWidget(label_4)

    label_6 = QtWidgets.QLabel("0/0")
    label_6.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    horizontalLayout_7.addWidget(label_6)

    verticalLayout_2.addLayout(horizontalLayout_7)
    horizontalLayout_9 = QtWidgets.QHBoxLayout()

    label_3 = QtWidgets.QLabel("今日成功/今日完成")
    horizontalLayout_9.addWidget(label_3)

    label_5 = QtWidgets.QLabel("0/0")
    label_5.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)

    horizontalLayout_9.addWidget(label_5)
    verticalLayout_2.addLayout(horizontalLayout_9)
    horizontalLayout_4 = QtWidgets.QHBoxLayout()

    label_9 = QtWidgets.QLabel("代理IP")
    horizontalLayout_4.addWidget(label_9)

    label_8 = QtWidgets.QLabel("端口")
    label_8.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
    horizontalLayout_4.addWidget(label_8)

    verticalLayout_2.addLayout(horizontalLayout_4)
    label_10 = QtWidgets.QLabel("配置文件ID")
    verticalLayout_2.addWidget(label_10)

    label_7 = QtWidgets.QLabel("任务链接地址")
    verticalLayout_2.addWidget(label_7)

    toolButton = TaskStartButton(index)
    toolButton.setText("开启")

    toolButton.setMinimumSize(QtCore.QSize(100, 40))
    toolButton.setLayoutDirection(QtCore.Qt.LeftToRight)
    toolButton.setAutoFillBackground(False)

    verticalLayout_2.addWidget(toolButton)

    wight.setLayout(verticalLayout_2)

    wrap = TaskCellWrap(wight, label, label_2, label_6, label_5, label_9, label_8, label_10, label_7, toolButton)

    return wrap


class ControlWindow(QtWidgets.QMainWindow):

    def __init__(self, widget):
        super(ControlWindow, self).__init__()
        self.setupUi(widget)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("")
        MainWindow.resize(840, 590)
        MainWindow.setMinimumSize(QtCore.QSize(900, 590))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.toolButton_2 = QtWidgets.QToolButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton_2.sizePolicy().hasHeightForWidth())
        self.toolButton_2.setSizePolicy(sizePolicy)
        self.toolButton_2.setMinimumSize(QtCore.QSize(0, 30))
        self.toolButton_2.setObjectName("toolButton_2")
        self.verticalLayout.addWidget(self.toolButton_2)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.toolButton = QtWidgets.QToolButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolButton.sizePolicy().hasHeightForWidth())
        self.toolButton.setSizePolicy(sizePolicy)
        self.toolButton.setMinimumSize(QtCore.QSize(0, 30))
        self.toolButton.setObjectName("toolButton")
        self.verticalLayout.addWidget(self.toolButton)
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout.addWidget(self.listWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 900, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.actionNew_Task_2 = QtWidgets.QAction(MainWindow)
        self.actionNew_Task_2.setObjectName("actionNew_Task_2")
        self.menu.addAction(self.actionNew_Task_2)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Chrome Driver"))
        self.toolButton_2.setText(_translate("MainWindow", "选择"))
        self.label_2.setText(_translate("MainWindow", "Proxy Tool"))
        self.toolButton.setText(_translate("MainWindow", "选择"))

        self.menu.setTitle("工具")
        self.actionNew_Task_2.setText("新建任务")
        self.actionNew_Task_2.triggered.connect(self.on_open_new_task)

        self.toolButton.clicked.connect(self.open_chromedriver_file)
        self.toolButton_2.clicked.connect(self.open_proxy_file)

        for i in range(0, 5):
            item_widget = QListWidgetItem()
            item_widget.setSizeHint(QSize(840, 300))
            self.listWidget.addItem(item_widget)
            wrap = get_task_cell(i)
            cell = wrap.widget
            self.listWidget.setItemWidget(item_widget, cell)
            print("开始绑定点击回调")
            wrap.start_btn.clicked.connect(self.on_click_start_task)

        self.listWidget.resize(840, 1500)

    def open_chromedriver_file(self):
        fileName, fileType = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "选取文件", os.getcwd(),
                                                                   "All Files(*);;Text Files(*.txt)")

        if len(fileName) == 0:
            return
        self.toolButton.setText(fileName)
        print("选择Proxy Tool：" + fileName)

    def open_proxy_file(self):
        fileName, fileType = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "选取文件", os.getcwd(),
                                                                   "All Files(*);;Text Files(*.txt)")
        if len(fileName) == 0:
            return
        self.toolButton_2.setText(fileName)
        print("选择Proxy Tool：" + fileName)

    def on_click_start_task(self):
        print(f"开启任务 {self.sender().task}")

    def on_open_new_task(self):
        dialog = TaskCreateDialog()
        dialog.exec_()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    widget = QtWidgets.QMainWindow()
    ui = ControlWindow(widget)
    widget.show()

    sys.exit(app.exec_())
